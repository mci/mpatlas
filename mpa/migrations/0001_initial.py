# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import ckeditor.fields
import taggit.managers
import django.contrib.gis.db.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('reversion', '__first__'),
        ('category', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('agency', models.CharField(max_length=500)),
                ('url', models.URLField(max_length=500, null=True, blank=True)),
                ('email', models.EmailField(max_length=500, null=True, blank=True)),
                ('address', models.TextField(null=True, blank=True)),
                ('phone', models.CharField(max_length=500, null=True, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Mpa',
            fields=[
                ('mpa_id', models.AutoField(verbose_name=b'MPA id', serialize=False, editable=False, primary_key=True)),
                ('wdpa_id', models.IntegerField(help_text=b'WDPA ID code. You probably should not be changing this.', null=True, verbose_name=b'WDPA id', blank=True)),
                ('usmpa_id', models.CharField(help_text=b'US NOAA MPA Center ID. You probably should not be changing this.', max_length=50, null=True, verbose_name=b'US MPA id', blank=True)),
                ('other_ids', models.CharField(help_text=b'ID codes used by other groups to identify this area, e.g., TNC Caribbean or Coral Triangle Atlas ids.', max_length=1000, null=True, verbose_name=b'Other reference id codes', blank=True)),
                ('name', models.CharField(help_text=b'Protected area name not including designation title', max_length=254, verbose_name=b'Name')),
                ('long_name', models.CharField(max_length=254, blank=True)),
                ('short_name', models.CharField(help_text=b'Nickname if any', max_length=254, blank=True)),
                ('slug', models.CharField(max_length=254, blank=True)),
                ('sovereign', models.CharField(max_length=50, null=True, verbose_name=b'Sovereign Country', blank=True)),
                ('country', models.CharField(max_length=50, verbose_name=b'Country / Territory')),
                ('sub_location', models.CharField(max_length=100, null=True, verbose_name=b'Sub Location', blank=True)),
                ('is_mpa', models.BooleanField(default=True)),
                ('verification_state', models.CharField(default=b'Unverified', max_length=100, verbose_name=b'Verification State', choices=[(b'Unverified', b'Unverified'), (b'Cannot Verify', b'Cannot Verify'), (b'Rejected as MPA', b'Rejected as MPA'), (b'Internally Verified', b'Internally Verified'), (b'Externally Verified', b'Externally Verified')])),
                ('verification_reason', models.CharField(max_length=1000, null=True, verbose_name=b'Verification Reason', blank=True)),
                ('verified_by', models.CharField(max_length=100, null=True, verbose_name=b'Verified By', blank=True)),
                ('verified_date', models.DateField(null=True, verbose_name=b'Date Verified', blank=True)),
                ('designation', models.CharField(max_length=254, null=True, verbose_name=b'Designation', blank=True)),
                ('designation_eng', models.CharField(max_length=254, null=True, verbose_name=b'English Designation', blank=True)),
                ('designation_type', models.CharField(blank=True, max_length=20, null=True, verbose_name=b'Designation Type', choices=[(b'National', b'National'), (b'International', b'International')])),
                ('iucn_category', models.CharField(blank=True, max_length=20, null=True, verbose_name=b'IUCN Category', choices=[(b'Ia', b'Ia'), (b'Ib', b'Ib'), (b'II', b'II'), (b'III', b'III'), (b'IV', b'IV'), (b'V', b'V'), (b'VI', b'VI')])),
                ('int_criteria', models.CharField(max_length=100, null=True, verbose_name=b'International Criteria', blank=True)),
                ('marine', models.NullBooleanField(default=True, verbose_name=b'Marine (field from WDPA)', editable=False)),
                ('status', models.CharField(default=b'Designated', choices=[(b'Proposed', b'Proposed'), (b'Designated', b'Designated'), (b'Defunct/Degazetted', b'Defunct/Degazetted')], max_length=100, blank=True, null=True, verbose_name=b'Status')),
                ('status_year', models.IntegerField(null=True, verbose_name=b'Status Year', blank=True)),
                ('implemented', models.BooleanField(default=True, help_text=b'MPA is designated and implemented with regulations enforced', verbose_name=b'Implemented?')),
                ('implementation_date', models.DateField(help_text=b'Date regulations went into effect or will go into effect', null=True, verbose_name=b'Implementation Date', blank=True)),
                ('no_take', models.CharField(default=b'Not Reported', max_length=100, verbose_name=b'No Take', choices=[(b'None', b'None'), (b'Part', b'Part'), (b'All', b'All'), (b'Not Reported', b'Not Reported')])),
                ('no_take_area', models.FloatField(null=True, verbose_name='No Take Area km\xb2', blank=True)),
                ('rep_m_area', models.FloatField(null=True, verbose_name='Reported Marine Area km\xb2', blank=True)),
                ('calc_m_area', models.FloatField(null=True, verbose_name='Calculated Marine Area km\xb2', blank=True)),
                ('rep_area', models.FloatField(null=True, verbose_name='Reported Area km\xb2', blank=True)),
                ('calc_area', models.FloatField(null=True, verbose_name='Calculated Area km\xb2', blank=True)),
                ('gov_type', models.CharField(max_length=254, null=True, verbose_name=b'Governance Type', blank=True)),
                ('mgmt_auth', models.CharField(max_length=254, null=True, verbose_name=b'Management Authority', blank=True)),
                ('mgmt_plan_type', models.CharField(max_length=254, null=True, verbose_name=b'Management Plan Type', blank=True)),
                ('mgmt_plan_ref', models.CharField(max_length=254, null=True, verbose_name=b'Management Plan Reference', blank=True)),
                ('conservation_effectiveness', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'High', b'High'), (b'Medium', b'Medium'), (b'Low', b'Low')])),
                ('protection_level', models.CharField(default=b'Unknown', editable=False, choices=[(b'Unknown', b'Unknown'), (b'Strongly Protected', b'Strongly Protected'), (b'Moderately Protected', b'Moderately Protected'), (b'Protected', b'Protected'), (b'Managed', b'Managed')], max_length=254, blank=True, null=True)),
                ('fishing', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Yes', b'Yes'), (b'No', b'No'), (b'Some Restrictions', b'Some Restrictions')])),
                ('fishing_info', models.TextField(null=True, blank=True)),
                ('fishing_citation', models.TextField(null=True, blank=True)),
                ('access', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Yes', b'Yes'), (b'No', b'No'), (b'Restricted', b'Restricted')])),
                ('access_info', models.TextField(null=True, blank=True)),
                ('access_citation', models.TextField(null=True, blank=True)),
                ('primary_conservation_focus', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Biodiversity Protection', b'Biodiversity Protection'), (b'Biomass Enhancement', b'Biomass Enhancement'), (b'Cultural Heritage', b'Cultural Heritage')])),
                ('secondary_conservation_focus', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Biodiversity Protection', b'Biodiversity Protection'), (b'Biomass Enhancement', b'Biomass Enhancement'), (b'Cultural Heritage', b'Cultural Heritage')])),
                ('tertiary_conservation_focus', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Biodiversity Protection', b'Biodiversity Protection'), (b'Biomass Enhancement', b'Biomass Enhancement'), (b'Cultural Heritage', b'Cultural Heritage')])),
                ('conservation_focus_info', models.TextField(null=True, blank=True)),
                ('conservation_focus_citation', models.TextField(null=True, blank=True)),
                ('protection_focus', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Ecosystem', b'Ecosystem'), (b'Focal Species', b'Focal Species')])),
                ('protection_focus_info', models.TextField(null=True, blank=True)),
                ('protection_focus_citation', models.TextField(null=True, blank=True)),
                ('constancy', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Year-round', b'Year-round'), (b'Seasonal', b'Seasonal'), (b'Temporary', b'Temporary')])),
                ('constancy_citation', models.TextField(null=True, blank=True)),
                ('permanence', models.CharField(default=b'Unknown', max_length=254, null=True, blank=True, choices=[(b'Unknown', b'Unknown'), (b'Permanent', b'Permanent'), (b'Non-Permanent', b'Non-Permanent'), (b'Non-Permanent - Conditional', b'Non-Permanent - Conditional'), (b'Non-Permanent - Temporary', b'Non-Permanent - Temporary')])),
                ('permanence_citation', models.TextField(null=True, blank=True)),
                ('wdpa_notes', models.CharField(verbose_name=b'Area Notes (from WDPA)', max_length=250, null=True, editable=False, blank=True)),
                ('notes', models.TextField(default=b'', null=True, verbose_name=b'Area Notes', blank=True)),
                ('summary', ckeditor.fields.RichTextField(null=True, verbose_name=b'MPA Summary Site Description', blank=True)),
                ('is_point', models.BooleanField(default=False)),
                ('geom_smerc', django.contrib.gis.db.models.fields.MultiPolygonField(srid=3857, null=True, editable=False, blank=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, editable=False, blank=True)),
                ('geog', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, geography=True, null=True, editable=False, blank=True)),
                ('simple_geom_smerc', django.contrib.gis.db.models.fields.MultiPolygonField(srid=3857, null=True, editable=False, blank=True)),
                ('simple_geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, editable=False, blank=True)),
                ('simple_geog', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, geography=True, null=True, editable=False, blank=True)),
                ('point_geom_smerc', django.contrib.gis.db.models.fields.MultiPointField(srid=3857, null=True, editable=False, blank=True)),
                ('point_geom', django.contrib.gis.db.models.fields.MultiPointField(srid=4326, null=True, editable=False, blank=True)),
                ('point_geog', django.contrib.gis.db.models.fields.MultiPointField(srid=4326, geography=True, null=True, editable=False, blank=True)),
                ('point_within', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, editable=False, blank=True)),
                ('bbox_lowerleft', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, editable=False, blank=True)),
                ('bbox_upperright', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, editable=False, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CandidateInfo',
            fields=[
                ('mpa', models.OneToOneField(primary_key=True, serialize=False, to='mpa.Mpa')),
                ('summary', ckeditor.fields.RichTextField(null=True, verbose_name=b'Candidate MPA Summary Description', blank=True)),
                ('source', models.CharField(max_length=1000, null=True, blank=True)),
                ('scope', models.CharField(default=b'Site', max_length=250, null=True, blank=True, choices=[(b'Site', b'Site'), (b'Seascape', b'Seascape')])),
                ('basin', models.CharField(max_length=250, null=True, blank=True)),
                ('region', models.CharField(max_length=250, null=True, blank=True)),
                ('location', models.CharField(max_length=1000, null=True, blank=True)),
                ('eez_or_highseas', models.CharField(max_length=1000, null=True, blank=True)),
                ('lead_organization', models.CharField(max_length=500, null=True, blank=True)),
                ('partner_organizations', models.CharField(max_length=1000, null=True, blank=True)),
                ('key_agency_or_leader', models.CharField(max_length=500, null=True, blank=True)),
                ('timeframe', models.CharField(max_length=500, null=True, blank=True)),
                ('current_protection', models.CharField(max_length=1000, null=True, blank=True)),
                ('desired_protection', models.CharField(max_length=1000, null=True, blank=True)),
                ('importance', models.CharField(max_length=1000, null=True, blank=True)),
                ('opportunity', models.CharField(max_length=1000, null=True, blank=True)),
                ('references', models.CharField(max_length=1000, null=True, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MpaCandidate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=56)),
                ('geom_smerc', django.contrib.gis.db.models.fields.MultiPointField(srid=3857, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPointField(srid=4326, null=True)),
                ('geog', django.contrib.gis.db.models.fields.MultiPointField(srid=4326, null=True, geography=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VersionMetadata',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('comment', models.TextField(blank=True)),
                ('reference', models.TextField(blank=True)),
                ('revision', models.OneToOneField(to='reversion.Revision')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WikiArticle',
            fields=[
                ('mpa', models.OneToOneField(primary_key=True, serialize=False, to='mpa.Mpa')),
                ('url', models.URLField(null=True, verbose_name=b'Link to Wikipedia Article', blank=True)),
                ('title', models.CharField(max_length=500, null=True, blank=True)),
                ('summary', ckeditor.fields.RichTextField(null=True, verbose_name=b'MPA Site Description from Wikipedia', blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='mpa',
            name='categories',
            field=taggit.managers.TaggableManager(to='category.Category', through='category.TaggedItem', blank=True, help_text=b'You can assign this area to one or more categories by providing a comma-separated list of tags enclosed in quotes (e.g., [ "Shark Sanctuary", "World Heritage Site" ]', verbose_name=b'Categories'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mpa',
            name='contact',
            field=models.ForeignKey(related_name='mpa_main_set', verbose_name=b'Main Contact', blank=True, to='mpa.Contact', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mpa',
            name='other_contacts',
            field=models.ManyToManyField(to='mpa.Contact', null=True, verbose_name=b'Other Contacts', blank=True),
            preserve_default=True,
        ),
    ]
